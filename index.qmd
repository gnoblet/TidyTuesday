---
title: "My TidyTuesday Gallery"
subtitle: "Weekly data visualization challenges, organized by year"
format:
  html:
    page-layout: full
    toc: false
    css: gallery-custom.css
---

```{r}
#| echo: false
#| message: false
#| warning: false

library(dplyr)
library(purrr)
library(yaml)
library(stringr)
library(knitr)

# Set locale to English UK for proper date formatting
suppressWarnings(invisible(Sys.setlocale("LC_TIME", "en_GB.UTF-8")))

# Function to extract YAML frontmatter from .qmd files
extract_metadata <- function(file_path) {
  lines <- readLines(file_path, warn = FALSE)

  # Find YAML frontmatter boundaries
  yaml_start <- which(lines == "---")[1]
  yaml_end <- which(lines == "---")[2]

  if (is.na(yaml_start) || is.na(yaml_end) || yaml_start >= yaml_end) {
    return(NULL)
  }

  # Extract and parse YAML
  yaml_content <- lines[(yaml_start + 1):(yaml_end - 1)]
  yaml_text <- paste(yaml_content, collapse = "\n")

  tryCatch({
    metadata <- yaml.load(yaml_text)

    # Create a single row data frame to avoid list expansion issues
    result <- data.frame(
      file_path = file_path,
      relative_path = gsub("^\\./", "", file_path),
      title = ifelse(is.null(metadata$title), "Untitled", metadata$title),
      subtitle = ifelse(is.null(metadata$subtitle), "", metadata$subtitle),
      date = ifelse(is.null(metadata$date), "", metadata$date),
      author = ifelse(is.null(metadata$author), "", metadata$author),
      image = ifelse(is.null(metadata$image), "", metadata$image),
      stringsAsFactors = FALSE
    )

    # Handle categories as a single string
    if (!is.null(metadata$categories)) {
      result$categories_list <- list(metadata$categories)
    } else {
      result$categories_list <- list(character(0))
    }

    # Determine language from path
    if (grepl("^r/", result$relative_path)) {
      result$language <- "R"
    } else if (grepl("^python/", result$relative_path)) {
      result$language <- "Python"
    } else {
      result$language <- "Unknown"
    }

    # Extract week number from path for additional context
    week_match <- str_extract(result$relative_path, "week[_-]?(\\d+)")
    if (!is.na(week_match)) {
      week_num <- str_extract(week_match, "\\d+")
      result$week <- sprintf("%02d", as.numeric(week_num))
      result$week_display <- paste("Week", week_num)
    } else {
      result$week <- "00"
      result$week_display <- ""
    }

    # Extract date for sorting
    if (result$date != "") {
      result$sort_date <- as.Date(result$date)
    } else {
      # Try to extract date from filename
      date_match <- str_extract(basename(file_path), "\\d{4}-\\d{2}-\\d{2}")
      if (!is.na(date_match)) {
        result$sort_date <- as.Date(date_match)
        result$date <- date_match
      } else {
        result$sort_date <- as.Date("1900-01-01")
      }
    }

    return(result)
  }, error = function(e) {
    return(NULL)
  })
}

# Find all .qmd files in r/ and python/ directories (recursive)
qmd_files <- c(
  list.files("r", pattern = "\\.qmd$", full.names = TRUE, recursive = TRUE),
  list.files("python", pattern = "\\.qmd$", full.names = TRUE, recursive = TRUE)
)

# Extract metadata from all files
all_metadata <- map_dfr(qmd_files, extract_metadata) %>%
  filter(!is.na(title)) %>%  # Remove any rows with missing titles
  distinct(relative_path, .keep_all = TRUE) %>%  # Remove duplicates by file path
  mutate(year = format(sort_date, "%Y")) %>%  # Extract year for grouping
  arrange(desc(sort_date), week)
```

```{r}
#| echo: false
#| results: asis

if (nrow(all_metadata) == 0) {
  cat('<div class="empty-state">')
  cat('<h3>No visualizations found yet</h3>')
  cat('<p>Start creating your TidyTuesday visualizations and they will appear here!</p>')
  cat('</div>')
} else {
  # Group by year and create sections
  years <- unique(all_metadata$year)
  years <- years[order(years, decreasing = TRUE)]  # Most recent first

  for (current_year in years) {
    year_data <- all_metadata %>%
      filter(year == current_year) %>%
      arrange(desc(week))

    cat("## ", current_year, "\n\n")
    cat('<div class="gallery-grid">\n\n')

    # Loop through each project in this year
    for (i in 1:nrow(year_data)) {
      row <- year_data[i, ]

      # Convert .qmd path to .html path for links
      html_path <- gsub("\\.qmd$", ".html", row$relative_path)

      # Image path - look for PNG with same name as qmd file in same folder
      qmd_dir <- dirname(row$relative_path)
      qmd_basename <- tools::file_path_sans_ext(basename(row$relative_path))
      image_path <- file.path(qmd_dir, paste0(qmd_basename, ".png"))

      cat('<div class="gallery-item">\n')
      cat('<a href="', html_path, '" class="gallery-link">\n')

      # Image container
      cat('<div class="gallery-image">\n')
      if (file.exists(image_path)) {
        cat('<img src="', image_path, '" alt="', row$title, '" loading="lazy">\n')
      } else {
        # Fallback gradient with week number
        cat('<div class="gallery-placeholder">\n')
        cat('<span class="week-number">', row$week, '</span>\n')
        cat('</div>\n')
      }
      cat('</div>\n')

      # Content
      cat('<div class="gallery-content">\n')
      cat('<div class="gallery-meta">\n')
      if (row$week_display != "") {
        cat('<span class="week-text-blue"><strong>', row$week_display, '</strong></span>\n')
      }
      cat('</div>\n')

      cat('<h4 class="gallery-title">', row$title, '</h4>\n')

      if (nchar(row$subtitle) > 0) {
        cat('<p class="gallery-subtitle">', row$subtitle, '</p>\n')
      }

      # Language and categories
      cat('<div class="gallery-tags">\n')
      cat('<span class="language-tag language-', tolower(row$language), '">', row$language, '</span>\n')

      if (length(row$categories_list[[1]]) > 0) {
        tech_cats <- row$categories_list[[1]][!row$categories_list[[1]] %in% c("r", "python", "R", "Python")]
        if (length(tech_cats) > 0) {
          for (cat_name in tech_cats[1:min(2, length(tech_cats))]) {
            cat('<span class="tech-tag">', cat_name, '</span>\n')
          }
        }
      }
      cat('</div>\n')

      cat('</div>\n')  # Close gallery-content
      cat('</a>\n')    # Close gallery-link
      cat('</div>\n\n') # Close gallery-item
    }

    cat('</div>\n\n')  # Close gallery-grid for this year
  }
}
```
