{
  "hash": "b3892c0039247ad52cbe514ed0a33c3e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Democracy Data Analysis\"\nsubtitle: \"TidyTuesday Week 45\"\ndate: \"2024-11-05\"\nauthor: \"gnoblet\"\ncategories: [python, geospatial, altair, geopandas, democracy]\nexecute:\n  freeze: true\n---\n\n## Overview\n\nThis week's TidyTuesday focused on democracy data, exploring which countries are considered democratic over time. I created interactive world maps using Python to visualize the evolution of democratic states from 1950 to the present.\n\n## Dataset\n\nThe dataset contains information about democracy classifications for countries worldwide, spanning from 1950 to recent years. Each country is classified as democratic or non-democratic for each year.\n\n**Source**: [TidyTuesday Democracy Data](https://github.com/rfordatascience/tidytuesday/tree/master/data/2024/2024-11-05)\n\n## Analysis\n\n### Libraries Used\n- `pandas` - Data manipulation and analysis\n- `geopandas` - Geospatial data handling and operations\n- `altair` - Interactive statistical visualizations\n\n### Data Loading and Preparation\n\n::: {#load-data .cell execution_count=1}\n``` {.python .cell-code}\n# Get CSV data\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-11-05/democracy_data.csv')\n\nprint(f\"Dataset shape: {df.shape}\")\nprint(f\"Years covered: {df['year'].min()} - {df['year'].max()}\")\nprint(f\"Countries: {df['country_code'].nunique()}\")\nprint(f\"Democratic classifications: {df['is_democracy'].value_counts()}\")\n```\n:::\n\n\n### Geospatial Data Integration\n\n::: {#geospatial-data .cell execution_count=2}\n``` {.python .cell-code}\n# Get world countries geojson\nimport geopandas as gpd\nworld = gpd.read_file('https://datahub.io/core/geo-countries/_r/-/data/countries.geojson')\n\nprint(f\"World geometries: {len(world)} countries\")\nprint(f\"Available columns: {world.columns.tolist()}\")\nprint(f\"Sample of country codes: {world['ISO_A3'].head().tolist() if 'ISO_A3' in world.columns else 'ISO_A3 not found'}\")\n```\n:::\n\n\n### Data Joining Function\n\n::: {#join-function .cell execution_count=3}\n``` {.python .cell-code}\n# Function that left joins DataFrame and GeoDataFrame\ndef left_join_gdf(df, gdf, key_df, key_gdf, how='left'):\n    \"\"\"\n    Join democracy data with world geometries\n    \"\"\"\n    return pd.merge(df, gdf, left_on=key_df, right_on=key_gdf, how=how).set_geometry('geometry')\n\n# Check available country code columns\nprint(\"Democracy data country codes sample:\", df['country_code'].head().tolist())\nprint(\"World data columns:\", [col for col in world.columns if 'ISO' in col or 'CODE' in col or col in ['ADMIN', 'NAME']])\n\n# Find the appropriate ISO3 column\niso3_columns = [col for col in world.columns if 'ISO' in col and '3' in col]\nprint(f\"Available ISO3 columns: {iso3_columns}\")\n\n# Use the first available ISO3 column\nif iso3_columns:\n    country_col = iso3_columns[0]  # Should be 'ISO3166-1-Alpha-3'\nelse:\n    # Fallback to first column that might contain country codes\n    potential_cols = [col for col in world.columns if any(term in col.upper() for term in ['ISO', 'CODE', 'ADMIN', 'NAME'])]\n    country_col = potential_cols[0] if potential_cols else world.columns[0]\n\nprint(f\"Using column: {country_col}\")\n\n# Join democracy data with world geometries\ndf_shp = left_join_gdf(\n    df,\n    world,\n    key_df='country_code',\n    key_gdf=country_col,\n    how='left'\n)\n\nprint(f\"Joined dataset shape: {df_shp.shape}\")\nprint(f\"Countries with geometry: {df_shp['geometry'].notna().sum()}\")\n```\n:::\n\n\n### Visualization Setup\n\n::: {#viz-setup .cell execution_count=4}\n``` {.python .cell-code}\nimport altair as alt\n\n# Color scheme for democracy status\ncol1 = '#5F4B8BFF'  # Democracy\ncol2 = '#E69A8DFF'  # Non-democracy\ncol3 = '#4c4b4c'    # No data\n\n# Focus on a specific year for detailed analysis\nyear = 2020\ndf_to_alt = df_shp[df_shp['year'] == year].copy()\n\nprint(f\"Data for {year}: {len(df_to_alt)} records\")\nprint(f\"Democratic countries in {year}: {df_to_alt['is_democracy'].sum()}\")\n```\n:::\n\n\n### Interactive Map Creation\n\n::: {#create-map .cell execution_count=5}\n``` {.python .cell-code}\n# Note: The 2020 chart will be created as part of the GIF generation\n# and saved as week_45.png (the last frame)\n```\n:::\n\n\n### Animated GIF Creation\n\nCreate individual charts for each year:\n\n::: {#create-gif .cell execution_count=6}\n``` {.python .cell-code}\nimport os\nimport imageio\nfrom PIL import Image\nimport numpy as np\n\n# Create temporary directory for individual frames inside the current directory\ntemp_dir = 'temp_frames'\nif not os.path.exists(temp_dir):\n    os.makedirs(temp_dir)\n\n# Get all available years and sort them\nyears = sorted(df['year'].unique())\nprint(f\"Creating GIF for years: {years[0]} - {years[-1]} ({len(years)} years)\")\n\n# Create individual charts for each year\nframe_paths = []\nfor i, year in enumerate(years):\n    print(f\"Processing year {year} ({i+1}/{len(years)})\")\n\n    # Filter data for current year\n    df_year = df_shp[df_shp['year'] == year].copy()\n\n    # Create base map chart\n    base_chart = alt.Chart(\n        df_year,\n        title=alt.Title(\n            'States Considered Democratic',\n            fontSize=24\n        )\n    ).mark_geoshape(\n        stroke='white',\n        strokeWidth=0.5\n    ).encode(\n        color=alt.Color(\n            'is_democracy:N',\n            scale=alt.Scale(\n                domain=[False, True],\n                range=['#E69A8DFF', '#5F4B8BFF']\n            ),\n            legend=alt.Legend(\n                title='Democratic Status',\n                labelExpr=\"datum.value ? 'Democratic' : 'Non-Democratic'\",\n                direction='horizontal',\n                orient='bottom',\n                titleFontSize=14,\n                labelFontSize=12,\n                symbolSize=150,\n                padding=10\n            )\n        ),\n        tooltip=[\n            alt.Tooltip('ADMIN:N', title='Country'),\n            alt.Tooltip('is_democracy:N', title='Democratic'),\n            alt.Tooltip('year:O', title='Year')\n        ]\n    ).properties(\n        width=800,\n        height=400\n    )\n\n    # Create year text overlay\n    year_text = alt.Chart(\n        alt.InlineData(values=[{'year': str(year), 'x': 780, 'y': 20}])\n    ).mark_text(\n        align='right',\n        baseline='top',\n        fontSize=36,\n        fontWeight='bold',\n        color='#333333'\n    ).encode(\n        x=alt.X('x:Q', scale=alt.Scale(domain=[0, 800])),\n        y=alt.Y('y:Q', scale=alt.Scale(domain=[0, 400])),\n        text=alt.Text('year:N')\n    )\n\n    # Combine the map and year text, then apply configurations\n    year_chart = alt.layer(base_chart, year_text).configure_view(\n        strokeWidth=0\n    ).configure_axis(\n        grid=False\n    ).configure_axisX(\n        labels=False,\n        ticks=False,\n        domain=False\n    ).configure_axisY(\n        labels=False,\n        ticks=False,\n        domain=False\n    )\n\n    # Save individual frame\n    frame_path = f'{temp_dir}/frame_{year}.png'\n    year_chart.save(frame_path)\n    frame_paths.append(frame_path)\n\n    # Save the last frame (most recent year) as the main thumbnail\n    if year == years[-1]:\n        year_chart.save('week_45.png')\n        print(f\"Saved {year} chart as week_45.png (thumbnail)\")\n\nprint(f\"Created {len(frame_paths)} frames\")\n```\n:::\n\n\nCreate GIF from individual frames:\n\n::: {#compile-gif .cell execution_count=7}\n``` {.python .cell-code}\n# Create GIF from individual frames\nimages = []\nfor frame_path in frame_paths:\n    if os.path.exists(frame_path):\n        img = Image.open(frame_path)\n        images.append(img)\n\n# Save as GIF\ngif_path = 'week_45.gif'\nif images:\n    images[0].save(\n        gif_path,\n        save_all=True,\n        append_images=images[1:],\n        duration=500,  # 500ms per frame\n        loop=0\n    )\n    print(f\"GIF saved as: {gif_path}\")\n    print(f\"GIF contains {len(images)} frames\")\nelse:\n    print(\"No images found to create GIF\")\n\n# Clean up temporary frames\nimport shutil\nif os.path.exists(temp_dir):\n    shutil.rmtree(temp_dir)\n    print(\"Cleaned up temporary frames\")\n```\n:::\n\n\n## Viz\n\n### Static Map (2020)\n![](week_45.png)\n\n### Animated Evolution (1950-2020)\n![](week_45.gif)\n\n",
    "supporting": [
      "week_45_files"
    ],
    "filters": [],
    "includes": {}
  }
}